{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17120\viewh11540\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs48 \cf0 Wichtige Images\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://hub.docker.com/"}}{\fldrslt 
\fs36 \cf0 https://hub.docker.com/}}
\fs36 \

\fs48 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Grundlegende Docker Befehle und Funktionen
\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Images, die nicht lokal existieren, werden aus der Registry geladen\
On-Premise Installation von eigenen IMAGES. Hinterlegen in der Registry. Hierf\'fcr wird ein Dockeraccount ben\'f6tigt.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Herunterladen eines Images: \

\i docker pull nats\
docker pull alpine
\i0 \
\
Tag = Version eines Images\

\i Docker pull nats:0.9.4
\i0 \
\
Anzeigen aller Images auf dem Docker Host\

\i docker images
\i0 \
\
L\'f6schen eines Images\

\i docker rmi IMAGE\
docker rmi IMAGE:TAG\
docker rmi: IMAGE-ID
\i0 \
\
L\'f6schen eines Containers\

\i docker rm buscon
\i0 \
\
Starten  eines Images als Container\

\i docker run alpine ls -l
\i0 \
\
Anzeige aller laufenden Docker Container\

\i docker ps
\i0 \
\
Anzeige aller existierenden Docker Container\

\i docker ps -a
\i0 \
\
Ausf\'fchren eines Befehl im Container. -it erzeugt eine Ausgabe nach standard out:\

\i docker run -it IMAGE Command\
docker run -it alpine /bin/sh
\i0 \
\
\'84Detached Mode\'93 von docker run\

\i docker run -d sequence/static-site
\i0 \
Started den Container als Batchjob.\
\
Ausf\'fchren von ls -l im Detached Container\

\i docker exec CONTAINER-ID ls -l\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 docker exec CONTAINER-NAME ls -l
\i0 \
\
Stoppen eines Containers\

\i docker stop CONTAINER-ID
\i0 \
\
L\'f6schen eines Containers\

\i docker rm CONTAINER-ID
\i0 \
\
Vergeben eines Containernamens\

\i docker run -d \'97name nginx
\i0 \
\
Publishing aller Ports eines Containers\

\i docker run -d -P
\i0 \
\
Anzeigen des Portmappings\

\i docker port nginx
\i0 \
\
Mapping eines Ports des Containers (80) auf einen Port des Hosts (9100)\

\i docker run -d -p 9100:80 sequence/static-site \
-p hostPort:ContainerPort
\i0 \
\
Entfernen aller laufenden Container eines Images ohne diese vorher zu stoppen\

\i docker rm -f CONTAINER-ID\'85 CONTAINER-NAME\'85.
\i0 \
\

\fs48 Erstes Dockerfile und Image
\fs24 \
Ein Dockerfile beschreibt ein Image, d.h. ein Softwarepaket\
\
Dockerfile Syntax - Verwenden eines Basisimages: 
\i FROM IMAGE-NAME
\i0 \

\i Username/IMAGE-NAME:Version
\i0 \
\
Dockerfile Syntax - Hinzuf\'fcgen von Metadaten: 
\i LABEL maintainer EMAIL
\i0 \
\
Dockerfile Syntax - Setzen der Proxies im Container\

\i ENV http_proxy=http://proxy.msg.de:3128 \\ https_proxy=https://proxy.msg.de:3128
\i0 \
\
Installieren von Komponenten im Dockerfile; in diesem Fall git und maven\
Befehl 
\i [RUN] die ganze Welt
\i0 \
Befehl 
\i [apk \'97no-cache add PACKAGE]
\i0 \
Beispiel: 
\i RUN app \'97no-cache add git maven
\i0 \
Beispiel: 
\i RUN git clone https://github\'85
\i0 \
\
Kopieren von Dateien in die Container\

\i COPY settings.xml /root/.m2/
\i0 \
\
Freigeben eines Containerports nach au\'dfen\

\i EXPOSE 8080
\i0 \
\
Festlegen des Arbeitsverzeichnisses. Alle Befehl werden in diesem Verzeichnis ausgef\'fchrt.\

\i WORKDIR /spring-petclinic
\i0 \
\
Setzen von Container Autostart Befehlen\
Mit dem Befehl CMD kann man den dafult command des Containers setzen\
\'dcbergabe von arg/argv an die Kommandozeile des Containers\

\i CMD [\'84mvn\'93, \'84spring-boot:run\'93]
\i0 \
\
Builden eines Images\

\i docker build -t petclinic\
docker run -d -P petclinic\
docker logs CONTAINER-ID
\i0 \
\

\fs48 Dockerfile mit Parameter
\fs24 \
Mit dem Befehl ARG kann ein mit \'97build-arg \'fcbergebener Parameter gesetzt werden\
Diese Parameter sind nur zur Buildzeit verf\'fcgbar.\

\i ARG myBuildArgVariable
\i0 \
\
Kopieren eines JAR-Files in den Container und Start der Javaanwendung\

\i ENV jarFile $myBuildArgVariable\
COPY $jarFile\
CMD java -jar $jarFile
\i0 \
\
Erstellen eines Images mit dem Namen petclinic.arg und dem Buildparameter spring-petclinic-1.4.2.jar\

\i docker build -t petclinic-arg \'97build-arg myBuildArgVariable=spring-petclinic-1.4.2.jar
\i0 \
\
Starten des Images und pr\'fcfen des Logstatus\

\i docker run -d -P petclinic-arg\
docker logs \'97details CONTAINER-ID
\i0 \
\

\fs48 Export von Images und Containern\

\fs24 Image von busybox, das den Namen buscon erh\'e4lt\

\i docker run -d \'97name buscon busybox mkdir /home/test
\i0 \
\
Erstellen eines neuen Images aus dem Container buscon, um dieses Exportieren zu k\'f6nnen\
Der Befehl docker commit kann neue Images aus bestehenden Containern erstellen\

\i docker commit buscon busybox-1
\i0 \
\
Speichern eines Images in eine Datei\

\i docker save \'97output=\'84Zielverzeichnis\'93 busybox-1
\i0 \
\
Exportieren eines Containers in ein tar-File\

\i docker export \'97output=\'84Zieldatei\'93 buskin
\i0 \
\
Import eines Exportierten Containers als neues Image busybox-1-export\
Der Befehl docker import wird zum Importieren von Containern aus tar Archiven verwendet.\

\i docker import Zieltarfile busybox-1-export:latest
\i0 \
\
Laden eines Images\
Der Befehl docker load wird zum Laden eines Images aus einem tar-Archiv verwendet\

\i docker load -i Zieltarfile 
\i0 \

\i \
Docker run busy box-1-export [.-d /home/test ] && echo \'82Directory found\'91 || echo \'82Directory not found\'82
\i0 \
\
Beim Export und Import wird eine neue History erzeugt. Anzeigen der History eines Images\

\i docker history  busybox\
docker history busybox-1\
docker history busybox-1-export\
\
\
/Users/hofmanma/Documents/Openshift/client.mac}
=================
Basics
=================

///////////
// Tuples
// + Tuples enable you to create and pass around groupings of values.
// + You can use a tuple to return multiple values from a function as a single compound value.
// + Tuples group multiple values into a single compound value.
// + The values within a tuple can be of any type and don’t have to be of the same type as each other.
/////////////////////////////
// Example - Compose a tuple
// + In this example, (404, "Not Found") is a tuple that describes an HTTP status code.
// + An HTTP status code is a special value returned by a web server whenever you request a web page.
// + A status code of 404 Not Found is returned if you request a webpage that doesn’t exist.
//     .. let http404Error = (404, "Not Found")
////////////////////////////////
// Example - Decompose a tuple
// + You can decompose a tuple’s contents into separate constants or variables, which you then access as usual:
//     .. let (statusCode, statusMessage) = http404Error

//////////////
// Optionals
// + Swift also introduces optional types, which handle the absence of a value.
// + Optionals say either “there is a value, and it equals x” or “there isn’t a value at all”.
// + Using optionals is similar to using nil with pointers in Objective-C,
//   but they work for any type, not just classes.

////////////////
// Data Types
// + Swift is a type-safe language

////////////////
// Declarations
// + You can declare multiple constants or multiple variables on a single line, separated by commas:
//     .. var x = 0.0, y = 0.0, z = 0.0
// + Type Annotation
//     .. var welcomeMessage: String
// + Multiple variables of the same type in one line:
//     .. var red, green, blue: Double
// + Type inference
//     .. If you don’t specify the type of value you need, Swift uses type inference to work out the appropriate
//        type.
//     .. Type inference enables a compiler to deduce the type of a particular expression automatically when
//        it compiles your code, simply by examining the values you provide.
//     .. Because of type inference, Swift requires far fewer type declarations than languages such as C or
//        Objective-C. Constants and variables are still explicitly typed, but much of the work of specifying
//        their type is done for you.
//     .. let meaningOfLife = 42
//     .. let pi = 3.14159

////////////////
// Integers
// + Integers are whole numbers with no fractional component, such as 42 and -23.
// + Integers are either signed (positive, zero, or negative) or unsigned (positive or zero).
// + Access maximum and minimum values
//     .. let minValue = UInt8.min  // minValue is equal to 0, and is of type UInt8
//     .. let maxValue = UInt8.max  // maxValue is equal to 255, and is of type UInt8
// + On a 32-bit platform, Int is the same size as Int32.
// + On a 64-bit platform, Int is the same size as Int64.
// + On a 32-bit platform, UInt is the same size as UInt32.
// + On a 64-bit platform, UInt is the same size as UInt64.
// + Integer literals can be written as:
//     .. A decimal number, with no prefix
//     .. A binary number, with a 0b prefix
//     .. An octal number, with a 0o prefix
//     .. A hexadecimal number, with a 0x prefix
/////////////
// Type Int
// + Use the Int type for all general-purpose integer constants and variables in your code,
//   even if they’re known to be nonnegative.
// + Use other integer types only when they’re specifically needed for the task at hand, because of
//   explicitly sized data from an external source, or for performance, memory usage,
//   or other necessary optimization

/////////////////////
// Floating Points
// + Double represents a 64-bit floating-point number.
// + Float represents a 32-bit floating-point number.

////////////////////
// Exponent
// + For decimal numbers with an exponent of exp, the base number is multiplied by 10exp:
//     .. 1.25e2 means 1.25 x 102, or 125.0.
//     .. 1.25e-2 means 1.25 x 10-2, or 0.0125.
// + For hexadecimal numbers with an exponent of exp, the base number is multiplied by 2exp:
//     .. 0xFp2 means 15 x 22, or 60.0.
//     .. 0xFp-2 means 15 x 2-2, or 3.75.

///////////////////////////////////
// Numeric Literals
// + Numeric literals can contain extra formatting to make them easier to read.
// + Both integers and floats can be padded with extra zeros and can contain underscores to help with readability.
// + Neither type of formatting affects the underlying value of the literal:
//     .. let paddedDouble = 000123.456
//     .. let oneMillion = 1_000_000
//     .. let justOverOneMillion = 1_000_000.000_000_1

///////////////////////////////////
// Type Aliases
// + Type aliases define an alternative name for an existing type. You define type aliases with
//   the typealias keyword.
// + Type aliases are useful when you want to refer to an existing type by a name that is contextually
//   more appropriate, such as when working with data of a specific size from an external source:
//    .. typealias AudioSample = UInt16
// + Once you define a type alias, you can use the alias anywhere you might use the original name:
//    .. var maxAmplitudeFound = AudioSample.min
//          -> maxAmplitudeFound is now 0

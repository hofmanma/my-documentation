/////////////////////
// Error Handling
//////////////////
// + Error handling is the process of responding to and recovering from error conditions in your program.
// + Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable
//   errors at runtime.
// + Some operations aren’t guaranteed to always complete execution or produce a useful output.

///////////////////////////////////////
// Representing and Throwing Errors
///////////////////////////////////
// + In Swift, errors are represented by values of types that conform to the Error protocol.
// + Swift enumerations are particularly well suited to modeling a group of related error conditions,
//   with associated values allowing for additional information about the nature of
//   an error to be communicated.
// .. enum VendingMachineError: Error {
//        case invalidSelection
//        case insufficientFunds(coinsNeeded: Int)
//        case outOfStock
//     }
// + Throwing an error lets you indicate that something unexpected happened and the normal flow of
//   execution can’t continue.
//     .. throw VendingMachineError.insufficientFunds(coinsNeeded: 5)

///////////////////////////
// Handling Errors
// + When an error is thrown, some surrounding piece of code must be responsible for handling the error.
// + There are four ways to handle errors in Swift:
//     .. You can propagate the error from a function to the code that calls that function
//     .. handle the error using a do-catch statement
//     .. handle the error as an optional value
//     .. assert that the error will not occur
/////////////////////////////
// do handle catch
//////////////
// Example 1
/////////////
// do {
//     try buyFavoriteSnack(person: "Alice", vendingMachine: vendingMachine)
//     print("Success! Yum.")
// } catch VendingMachineError.invalidSelection {
//     print("Invalid Selection.")
// } catch VendingMachineError.outOfStock {
//     print("Out of Stock.")
// } catch VendingMachineError.insufficientFunds(let coinsNeeded) {
//     print("Insufficient funds. Please insert an additional \(coinsNeeded) coins.")
// } catch {
//     print("Unexpected error: \(error).")
//}
// + If no pattern is matched, the error gets caught by the final catch clause
//   and is bound to a local error constant.
//////////////
// Example 2
/////////////
//  do {
//        try vendingMachine.vend(itemNamed: item)
//  } catch is VendingMachineError {
//        print("Invalid selection, out of stock, or not enough money.")
//  }

/////////////////////////////////////////
// Converting Errors to Optional Values
////////////////
// + You use try? to handle an error by converting it to an optional value
// + If an error is thrown while evaluating the try? expression, the value of the expression is nil.
///////////////////
// Example
////////////
.......... both snippets ..........
// func someThrowingFunction() throws -> Int {
//     // ...
// }
// let x = try? someThrowingFunction()
......... and .....................
// let x: Int?
// do {
//     x = try someThrowingFunction()
// } catch {
//     x = nil
// }
......... do the same ..............

////////////////////////////////
// Disabling Error Propagation
////////////
// + Sometimes you know a throwing function or method won’t, in fact, throw an error at runtime.
// + On those occasions, you can write try! before the expression to disable error propagation
//   and wrap the call in a runtime assertion that no error will be thrown.
////////////
// Example
//////////
// .. let photo = try! loadImage(atPath: "./Resources/John Appleseed.jpg")

//////////////////////////////////////
// Specifying Cleanup Actions - defer
/////////////////////
// + You use a defer statement to execute a set of statements just before code execution leaves
//   the current block of code.
// + This statement lets you do any necessary cleanup that should be performed regardless of
//   how execution leaves the current block of code—whether it leaves because an error
//   was thrown or because of a statement such as return or break.
// + The deferred statements may not contain any code that would transfer control out of the statements,
//   such as a break or a return statement, or by throwing an error.
/////////////////
// Example
////////////
// func processFile(filename: String) throws {
//     if exists(filename) {
//         let file = open(filename)
//         defer {
//             close(file)
//         }
//         while let line = try file.readline() {
//             // Work with the file.
//         }
//         // close(file) is called here, at the end of the scope.
//     }
// }

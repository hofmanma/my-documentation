////////////////////////////
// Optional Chaining
//////////////////////
// + Optional chaining is a process for querying and calling properties, methods, and subscripts
//   on an optional that might currently be nil.
// + If the optional contains a value, the property, method, or subscript call succeeds
// + if the optional is nil, the property, method, or subscript call returns nil
// + Multiple queries can be chained together, and the entire chain fails gracefully
//   if any link in the chain is nil.

/////////////////////////////////////////////////////////////
// Optional Chaining as an Alternative to Forced Unwrapping
////////////////////
// + You specify optional chaining by placing a question mark (?) after the optional value
//   on which you wish to call a property, method or subscript if the optional is non-nil.
// + This is very similar to placing an exclamation mark (!) after an optional value
//   to force the unwrapping of its value.
// + The main difference is that optional chaining fails gracefully when the optional is nil,
//   whereas forced unwrapping triggers a runtime error when the optional is nil.
// + To reflect the fact that optional chaining can be called on a nil value,
//   the result of an optional chaining call is always an optional value,
//   even if the property, method, or subscript you are querying returns a nonoptional value.
// + You can use this optional return value to check whether the optional chaining call was successful
//   (the returned optional contains a value), or did not succeed due to a nil value in the chain
//   (the returned optional value is nil).
// + Specifically, the result of an optional chaining call is of the same type as the expected return value,
//   but wrapped in an optional.
// + You can use optional chaining with calls to properties, methods, and subscripts
//   that are more than one level deep. 

/////////////////////////
// In Practice
///////////////
// + Optional chaining provides an alternative way to access the value of numberOfRooms.
// + To use optional chaining, use a question mark in place of the exclamation mark:
///////////////
// Example
///////////
// if let roomCount = john.residence?.numberOfRooms {
//    print("John's residence has \(roomCount) room(s).")
// } else {
//    print("Unable to retrieve the number of rooms.")
// }
/////////////////
// Description
//////////////
// + Prints "Unable to retrieve the number of rooms."
// + Because the attempt to access numberOfRooms has the potential to fail, the optional chaining attempt
//   returns a value of type Int?, or “optional Int”.
// + The optional Int is accessed through optional binding to unwrap the integer and assign the nonoptional
//   value to the roomCount variable.
// + Note that this is true even though numberOfRooms is a nonoptional Int.
//   The fact that it is queried through an optional chain means that the call to numberOfRooms
//   will always return an Int? instead of an Int.

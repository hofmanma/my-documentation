/////////////////////////////////
// Jenkins documentation
// https://github.com/openshift/origin/blob/master/examples/jenkins/README.md
// https://jenkins.io/doc/

/////////////////////////////////
// What is Jenkins
////////////////////
// + Jenkins is a self-contained, open source automation server which can be used to automate
//   all sorts of tasks related to building, testing, and delivering or deploying software.
// + Jenkins can be installed through native system packages, Docker, or even run standalone by
//   any machine with a Java Runtime Environment (JRE) installed.

/////////////////////////////////
// What is a Jenkins Pipeline
//////////////////////////////
// + Jenkins Pipeline (or simply "Pipeline") is a suite of plugins which supports implementing and
//   integrating continuous delivery pipelines into Jenkins.
// + A continuous delivery pipeline is an automated expression of your process for getting software
//   from version control right through to your users and customers.
// + Jenkins Pipeline provides an extensible set of tools for modeling simple-to-complex delivery pipelines
//   "as code". The definition of a Jenkins Pipeline is typically written into
//   a text file (called a Jenkinsfile) which in turn is checked into a projectâ€™s source control repository
//////////////////////////////////
// Declarative vs. Scripted
/////////////////////////////
// + A Jenkinsfile can be written using two types of syntax - Declarative and Scripted.
// + Declarative and Scripted Pipelines are constructed fundamentally differently.
//   Declarative Pipeline is a more recent feature of Jenkins Pipeline which:
//      .. provides richer syntactical features over Scripted Pipeline syntax, and
//      .. is designed to make writing and reading Pipeline code easier.
// + Many of the individual syntactical components (or "steps") written into a Jenkinsfile, however,
//   are common to both Declarative and Scripted Pipeline.

//////////////////////////////////
// Why Pipeline?
//////////////////
// + Jenkins is, fundamentally, an automation engine which supports a number of automation patterns.
// + Pipeline adds a powerful set of automation tools onto Jenkins, supporting use cases that span from
//   simple continuous integration to comprehensive CD pipelines.
// + By modeling a series of related tasks, users can take advantage of the many features of Pipeline:
//    .. Code: Pipelines are implemented in code and typically checked into source control,
//       giving teams the ability to edit, review, and iterate upon their delivery pipeline.
//    .. Durable: Pipelines can survive both planned and unplanned restarts of the Jenkins master.
//    .. Pausable: Pipelines can optionally stop and wait for human input or approval before continuing
//       the Pipeline run.
//    .. Versatile: Pipelines support complex real-world CD requirements, including the ability to
//       fork/join, loop, and perform work in parallel.
//    .. Extensible: The Pipeline plugin supports custom extensions to its DSL [1] and multiple
//       options for integration with other plugins.

//////////////////////////////////
// Basic Terms and Concepts
//////////////////////////////
// Nodes
// + A node is a machine which is part of the Jenkins environment and is capable
//   of executing a Pipeline.
//////////////
// Stages
// + A stage block defines a conceptually distinct subset of tasks performed through the
//   entire Pipeline (e.g. "Build", "Test" and "Deploy" stages),
//   which is used by many plugins to visualize or present Jenkins Pipeline status/progress
/////////////
// Steps
// + A single task. Fundamentally, a step tells Jenkins what to do at a particular point in time
//  (or "step" in the process).
// + For example, to execute the shell command make use the sh step: sh 'make'.
// + When a plugin extends the Pipeline DSL, [1] that typically means the plugin has implemented a new step.

/////////////////////////////////////////////////////////////
// Declarative Sample - Jenkinsfile (Declarative Pipeline)
////////////////////////////////////////////////////
// pipeline is Declarative Pipeline-specific syntax that defines a "block" containing all content
// and instructions for executing the entire Pipeline.
pipeline {
    ///////////////////////////////
    // Agent
    ///////////////
    // + agent is Declarative Pipeline-specific syntax that instructs Jenkins to allocate an
    //   executor (on a node) and workspace for the entire Pipeline.
    // + The agent section specifies where the entire Pipeline, or a specific stage, will execute in the
    //   Jenkins environment depending on where the agent section is placed.
    // + The section must be defined at the top-level inside the pipeline block,
    //   but stage-level usage is optional
    ////////////////////
    // + any
    //   Execute the Pipeline, or stage, on any available agent. For example: agent any
    // + none
    //   When applied at the top-level of the pipeline block no global agent will be allocated for the
    //   entire Pipeline run and each stage section will need to contain its own agent section.
    //   For example: agent none
    // + label
    //   Execute the Pipeline, or stage, on an agent available in the Jenkins environment with
    //   the provided label. For example: agent { label 'my-defined-label' }
    // + node
    //   agent { node { label 'labelName' } } behaves the same as agent { label 'labelName' },
    //   but node allows for additional options (such as customWorkspace).
    // + docker
    //   Execute the Pipeline, or stage, with the given container which will be dynamically
    //   provisioned on a node pre-configured to accept Docker-based Pipelines, or on a node matching
    //   the optionally defined label parameter
    // + dockerfile
    //   the Pipeline, or stage, with a container built from a Dockerfile contained in the source repository
    ///////////////////////////////
    // Common parameters
    // + label
    //   A string. The label on which to run the Pipeline or individual stage.
    //   This option is valid for node, docker and dockerfile, and is required for node.
    // + customWorkspace
    //   A string. Run the Pipeline or individual stage this agent is applied to within this
    //   custom workspace, rather than the default.
    //   It can be either a relative path, in which case the custom workspace will be under the
    //   workspace root on the node, or an absolute path
    agent {
      node {
        label 'my-defined-label'
        customWorkspace '/some/other/path'
      }
    }
    // Execute this Pipeline or any of its stages, on any available agent.
    agent any
    // Execute all the steps defined in this Pipeline within a newly created container
    // of the given name and tag (maven:3-alpine).
    agent { docker 'maven:3-alpine' }
    //////////////////////////////
    // Environment
    ////////////////
    // + The environment directive specifies a sequence of key-value pairs which will be defined as
    //   environment variables for the all steps, or stage-specific steps,
    //   depending on where the environment directive is located within the Pipeline.
    // + An environment directive used in the top-level pipeline block will apply to all steps
    //   within the Pipeline.
    // + An environment directive defined within a stage will only apply the given environment variables
    //   to steps within the stage.
    environment {
        CC = 'clang'
    }
    /////////////////////
    // Options
    /////////////
    // + The options directive allows configuring Pipeline-specific options from within the Pipeline itself.
    // + Pipeline provides a number of these options, such as buildDiscarder,
    //   but they may also be provided by plugins, such as timestamps
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    ///////////////////
    // Parameters
    ///////////////
    // + The parameters directive provides a list of parameters which a user should provide
    //   when triggering the Pipeline.
    // + The values for these user-specified parameters are made available to Pipeline steps via
    //   the params object - see stage('Example')
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
    }
    ////////////////////
    // Triggers
    //////////////
    // + The triggers directive defines the automated ways in which the Pipeline should be re-triggered.
    // + For Pipelines which are integrated with a source such as GitHub or BitBucket,
    //   triggers may not be necessary as webhooks-based integration will likely already be present.
    // + The triggers currently available are cron, pollSCM and upstream
    ///////////////////////
    // + cron
    //   Accepts a cron-style string to define a regular interval at which the Pipeline should be re-triggered
    // + pollSCM
    //   Accepts a cron-style string to define a regular interval at which Jenkins should check for new
    //   source changes. If new changes exist, the Pipeline will be re-triggered
    // + upstream
    //   Accepts a comma separated string of jobs and a threshold. When any job in the string finishes
    //   with the minimum threshold, the Pipeline will be re-triggered
    triggers {
        cron('H */4 * * 1-5')
    }
    stages {
        // Defines the "Build" stage.
        // Stage is a syntax block that describes a stage of this Pipeline
        stage('Build') {
            // steps is Declarative Pipeline-specific syntax that describes the steps
            // to be run in this stage.
            steps {
                // Perform some steps related to the "Build" stage.
                // Sequential or parallel execution ?
                sh 'make' // sh is a Pipeline step (provided by the Pipeline: Nodes and Processes plugin)
                          // that executes the given shell command.

            }
        }
        // Defines the "Test" stage.
        stage('Test') {
            steps {
                // Perform some steps related to the "Test" stage.
                sh 'make check'
                // junit is another a Pipeline step (provided by the JUnit plugin)
                // for aggregating test reports.
                junit 'reports/**/*.xml'
            }
        }
        // Defines the "Deploy" stage.
        stage('Deploy') {
            steps {
                // Perform some steps related to the "Deploy" stage.
                sh 'make publish'
            }
        }
        stage('Example') {
            ///////////////////////////////////////////
            // Input Directive
            ///////////////////////
            // + The input directive on a stage allows you to prompt for input, using the input step.
            // + The stage will pause after any options have been applied, and before entering the stage`s
            //   agent or evaluating its when condition.
            // + If the input is approved, the stage will then continue.
            // + Any parameters provided as part of the input submission will be available in the environment
            //   for the rest of the stage
            input {
              message "Should we continue?"
              ok "Yes, we should."
              submitter "alice,bob"
              parameters {
                  string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
              }
            }
            steps {
                echo "Hello ${params.PERSON}"
                ////////////////////////////////////////
                // Script Directive
                //////////////////////
                // + The script step takes a block of Scripted Pipeline and executes that in the Declarative
                //   Pipeline.
                // + For most use-cases, the script step should be unnecessary in Declarative Pipelines,
                //   but it can provide a useful "escape hatch."
                script {
                    def browsers = ['chrome', 'firefox']
                    for (int i = 0; i < browsers.size(); ++i) {
                        echo "Testing the ${browsers[i]} browser"
                    }
                }
            }
        }
        stage('Example Deploy') {
            //////////////////////////
            // When Directive
            //////////////////////
            // + The when directive allows the Pipeline to determine whether the stage should be executed
            //   depending on the given condition. The when directive must contain at least one condition.
            // + If the when directive contains more than one condition, all the child conditions must return true
            //   for the stage to execute
            ///////////////////////////////
            // + branch
            //   Execute the stage when the branch being built matches the branch pattern given,
            //   for example: when { branch 'master' }. Note that this only works on a multibranch Pipeline.
            // + environment
            //   Execute the stage when the specified environment variable is set to the given value,
            //   for example: when { environment name: 'DEPLOY_TO', value: 'production' }
            // + expression
            //   Execute the stage when the specified Groovy expression evaluates to true,
            //   for example: when { expression { return params.DEBUG_BUILD } }
            // + not
            //   Execute the stage when the nested condition is false. Must contain one condition.
            //   For example: when { not { branch 'master' } }
            // + allOf ( && )
            //   Execute the stage when all of the nested conditions are true.
            //   Must contain at least one condition.
            //   For example: when { allOf { branch 'master'; environment name: 'DEPLOY_TO', value: 'production' } }
            // + anyOf ( || )
            //   Execute the stage when at least one of the nested conditions is true.
            //   Must contain at least one condition.
            //   For example: when { anyOf { branch 'master'; branch 'staging' } }
            when {
                branch 'production'
            }
            steps {
                echo 'Deploying'
            }
        }
        stage('Parallel Stage') {
            when {
                branch 'master'
            }
            failFast true
            /////////////////////////////////
            // Parallel Directive
            /////////////////////////
            // + Stages in Declarative Pipeline may declare a number of nested stages within them,
            //   which will be executed in parallel.
            // + Note that a stage must have one and only one of either steps or parallel.
            // + The nested stages cannot contain further parallel stages themselves, but otherwise behave
            //   the same as any other stage.
            // + Any stage containing parallel cannot contain agent or tools, since those are not relevant
            //   without steps.
            parallel {
                stage('Branch A') {
                    agent {
                        label "for-branch-a"
                    }
                    steps {
                        echo "On Branch A"
                    }
                }
                stage('Branch B') {
                    agent {
                        label "for-branch-b"
                    }
                    steps {
                        echo "On Branch B"
                    }
                }
            }
        }
    }
    ///////////////////////////
    // post
    ///////////
    // + The post section defines one or more additional steps that are run upon the completion of
    //   a Pipelineâ€™s or stageâ€™s run (depending on the location of the post section within the Pipeline
    // + post can support one of the following post-condition blocks:
    //   always, changed, failure, success, unstable, and aborted
    ////////////////////////////////////
    // + always
    //   Run the steps in the post section regardless of the completion status of the Pipelineâ€™s or stageâ€™s run.
    // + changed
    //   Only run the steps in post if the current Pipelineâ€™s or stageâ€™s run has a different completion
    //   status from its previous run.
    // + failure
    //   Only run the steps in post if the current Pipelineâ€™s or stageâ€™s run has a "failed" status,
    //   typically denoted by red in the web UI.
    // + success
    //   Only run the steps in post if the current Pipelineâ€™s or stageâ€™s run has a "success" status,
    //   typically denoted by blue or green in the web UI.
    // + unstable
    //   Only run the steps in post if the current Pipelineâ€™s or stageâ€™s run has an "unstable" status,
    //   usually caused by test failures, code violations, etc.
    //   This is typically denoted by yellow in the web UI.0
    // + aborted
         Only run the steps in post if the current Pipelineâ€™s or stageâ€™s run has an "aborted" status,
         usually due to the Pipeline being manually aborted. This is typically denoted by gray in the web UI.
    post {
        always {
            echo 'I will always say Hello again!'
        }
    }
}

////////////////////////////////////
// Scripted Pipeline Fundamentals
//////////////////////////////////
// + In Scripted Pipeline syntax, one or more node blocks do/es the core work throughout the entire Pipeline.
// + Although this is not a mandatory requirement of Scripted Pipeline syntax, confining your Pipelineâ€™s
//   work inside of a node block does two things:
//    .. Schedules the steps contained within the block to run by adding an item to the Jenkins queue.
//       As soon as an executor is free on a node, the steps will run.
//    .. Creates a workspace (a directory specific to that particular Pipeline) where work can be done on
//       files checked out from source control.
// + Caution: Depending on your Jenkins configuration, some workspaces may not get automatically cleaned up
//   after a period of inactivity. See tickets and discussion linked from JENKINS-2111 for more information.
///////////////////////////////////////////////////////
// Scripted Sample - Jenkinsfile (Scripted Pipeline)
///////////////////
node {  // Execute this Pipeline or any of its stages, on any available agent.
    // Defines the "Build" stage. stage blocks are optional in Scripted Pipeline syntax.
    // However, implementing stage blocks in a Scripted Pipeline provides clearer visualization of
    // each stage's subset of tasks/steps in the Jenkins UI.
    stage('Build') {
        // Perform some steps related to the "Build" stage.
        // Sequential or parallel execution?
    }
    // Defines the "Test" stage.
    stage('Test') {
        // Perform some steps related to the "Test" stage.
    }
    // Defines the "Deploy" stage.
    stage('Deploy') {
        // Perform some steps related to the "Deploy" stage.
    }
}

//////////////////////////////////
// Important Properties
// + Most used tool in CI
// + written in JAVA
// + runs in arbitrary EJB-Containers
// + delivered with minimal Servlet-Middleware Winstone
//     --> runnable on Application-Servers due to Java-EE-Specification
//     --> No additional servlet container like Tomcat required
// + Supports build tools like..
//     --> Maven
//     --> Apache Ant
//     --> Gradle
// + Supports version maintainance tools like ..
//     --> CVS, Subverrsion
//     --> Git
// + Supports automated test tools like ..
//     --> JUnit
//     --> Emma

/////////////////////////////////
// Plugins for..
// + PHP-based,
// + Ruby-based
// + .NET-based
// .. projects

/////////////////////////////////
// REST API
// .. for control by other programs

/////////////////////////////////
// Install Maven into Jenkins
// Tutorial - https://www.tutorialspoint.com/jenkins/jenkins_maven_setup.htm
// Tutorial - http://www.tothenew.com/blog/how-to-setup-jenkins-for-a-maven-project/

////////////////////////////////////////////
// Openshift Pipeline Builds using Jenkins .. /Menu "Pipeline Build"
// https://docs.openshift.org/latest/architecture/core_concepts/builds_and_image_streams.html#pipeline-build
//
// The Pipeline build strategy allows developers to define a Jenkins pipeline for execution by
// the Jenkins pipeline plugin. The build can be started, monitored, and managed by OpenShift Origin
// in the same way as any other build type.

/////////////////////////////////
// Offene Fragen und Punkte
///////////////////////////
// + Wie integriert sich Jenkins in die Openshift Pipeline?
// + Bedienung der Jenkins Web UI und CLI?
// + Was genau passiert bei einem deploy
// + Was genau passiert bei einem Build.
// + Wiso werden Deploys und Builds unterschieden?
// + Wohin wird deployed (PV/PVC)
// + Wie finde ich die Deployment Verzeichnisse?
// + Kann man die Deployment Verzeichnisse Ã¤ndern?

////////////////////////////////
// Build und Deploy.
// 1. Build
//    Bei einem Build werden die verwendeten Images aus einer Registry Source gepullt.
//    A jenkins job is called build. This is not related to docker builds.
// 2. Deploys
//    Bei einem Deploy werden die Images auf einem Host installiert und gestartet.
// 3. Pipelines
//    Pipelines sind immer Jenkinsfiles, welche den Build und Deploy beschreiben.
//    (siehe Beispiel unten)

///////////////////////////////////
// Sample Pipeline configuration
try {
   timeout(time: 20, unit: 'MINUTES') {
      ////////////////////////////////
      // node()
      // A step that schedules a task to run by adding it to the Jenkins build queue.
      // It may be run on the jenkins master or slave (in this case a container).
      // Commands outside of node-elements are run on the Jenkins master.
      node('nodejs') {
          ///////////////////////////
          // stage()
          // By default, pipeline builds can run concurrently.
          // The stage command lets you mark certain sections of a build as being
          // constrained by limited concurrency.
          stage('build') {
            // Start build referenced by the build configuration called 'nodejs-mongodb-example'
            openshiftBuild(buildConfig: 'nodejs-mongodb-example', showBuildLogs: 'true')
          }
          stage('deploy') {
            // Start deployment referenced by the deployment configuration called 'nodejs-mongodb-example'
            openshiftDeploy(deploymentConfig: 'nodejs-mongodb-example')
          }
        }
   }
} catch (err) {
   echo "in catch block"
   echo "Caught: ${err}"
   currentBuild.result = 'FAILURE'
   throw err
}

////////////////////////////////////////////////////
// Jenkins Web UI - Snippet Generator
// Menu/Pipeline Syntax
////////////////////////
// Generating pipeline code for the jenkins files
// 1. Selecting the use case
// 2. Press "Generate Pipeline Script"

//////////////////////////////////////////////////
// Openshift Pipeline Jenkins Plugin
////////////////////
// openshiftBuild

/////////////////////////////////////////
// Script Konsole - Groovy Script
///////////////////////////////////////
// + Konfiguration der Jenkins Instanz mit Groovy Scripts
// + http://www.groovy-lang.org
////////////////////////////////
// + Groovy ist eine Programmiersprache und Skriptsprache, die dynamische und statische Typisierung unterstÃ¼tzt.
//   Sie zÃ¤hlt zu den Sprachen, die auf der Java Virtual Machine ausgefÃ¼hrt werden, was eine VerfÃ¼gbarkeit
//   fÃ¼r viele Plattformen wie insbesondere Linux, Mac OS X und Windows ermÃ¶glicht.
// + Groovy wird nicht wie andere Skriptsprachen Ã¼ber einen interpretierten Abstract Syntax Tree ausgefÃ¼hrt,
//   sondern vor dem Ablauf eines Skripts direkt in Java-Bytecode Ã¼bersetzt.

//////////////////////////////////////
// Logs
////////
// Pipeline Build Logs
// 1. Open Jenkins
// 2. Open Pipeline and the Stage View
// 3. Click on the step and press "Logs"
//////////////////////////
// Pipeline Build Logs
// [Open Project]/[Build Verlauf]
// + Liste der Builds wird angezeigt
// + Ã–ffnen eines Builds
/////////////////////////
// Jenkins System Logs
// [Jenkins Verwalten]/[System Log]/[Alle Jenkins Logs]
// + Gesamte Logausgabe

////////////////////////////////////
// Configure Pipelines
///////////
// [Open Pipeline]/[Konfigurieren]
// + Edit the Jenkinsfile
// + Add additional triggers
// + Lock concurrent processing
// + Move pipeline to other projects
//   [Open Pipeline]/[Move]

/////////////////////////////////////
// Jenkins Project Configuration
/////////////////////////
// [Start Menu]/[Konfigurieren]
// + Link to JIRA
// + Hinterlegen einer URL fÃ¼r eine externe Docker-Registry
// + Add Config files
//     [Project]/[Config Files]/[Add a new Config]
//     .. Maven config Files (local or global)
//     .. Json File
//     .. Groovy File

///////////////////////////////
// Nodes verwalten
///////////////////
// [Jenkins Verwalten]/[Knoten Verwalten]
// + Liste der Nodes wird angezeigt.
// + HinzufÃ¼gen neuer Knoten.
